name: Update version and CHANGELOG.md

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - uses: actions/github-script@v3
        name: Get Release tag name
        id: tag
        with:
          script: return github.context.payload.release.tag_name
      - uses: actions/github-script@v3
        name: Get Release body
        id: body
        with:
          script: return github.context.payload.release.body
      - uses: actions/github-script@v3
        name: Get Release target
        id: target
        with:
          script: return github.context.payload.release.target_commitish
      - name: Install builder dependencies
        run: |
          python -m pip install -U logchange newversion poetry
      - name: Get version
        id: version
        env:
          RAW_VERSION: "${{steps.version.outputs.result}}"
        run: |
          VERSION=`echo "${RAW_VERSION}" | newversion`
          echo "::set-output name=result::${VERSION}"
      - name: Update version and changelog
        env:
          VERSION: "${{steps.version.outputs.result}}"
          RELEASE_BODY: "${{steps.body.outputs.result}}"
        run: |
          IS_STABLE=`echo ${VERSION} | python -m newversion is_stable || false`
          if $IS_STABLE; then
            python -m logchange add "${VERSION}" -i "${RELEASE_BODY}"
          else
            python -m logchange add unreleased -i "${RELEASE_BODY}"
          fi
          poetry version "${VERSION}"
      - name: Create release branch
        env:
          VERSION: "${{steps.version.outputs.result}}"
        run: |
          git config --global user.name 'My bot'
          git config --global user.email 'bot@users.noreply.github.com'

          BRANCH_NAME="release/${VERSION}"
          git checkout -b BRANCH_NAME
          git add pyproject.toml
          git add CHANGELOG.md
          git commit -m "Release ${VERSION}"
          git push --set-upstream origin "${BRANCH_NAME}"
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Release ${{steps.version.outputs.result}}
          title: Release ${{steps.version.outputs.result}}
          body: ${{steps.body.outputs.result}}
          branch: release/${{steps.version.outputs.result}}
          base: ${{steps.target.outputs.result}}
